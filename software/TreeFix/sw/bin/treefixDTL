#!/usr/bin/python

# wrapper script around TreeFix for use with rangerDTL reconciliation model

# python libraries
import os, sys, optparse
import commands, subprocess

# treefix libraries
from treefix import common
from treefix import treefixDTL

#==========================================================
# parser

VERSION = treefixDTL.PROGRAM_VERSION_TEXT
#commands.getoutput("treefix --version").rsplit()[-1]

def parse_args():
    """parse input arguments"""
    
    parser = optparse.OptionParser(
        usage = "usage: %prog [options] <gene tree> ...",
        
        version = "%prog " + VERSION,

        description =
             "TreeFix-DTL is a phylogenetic program for improving prokaryotic gene tree reconstructions using " +
             "a test statistic for likelihood equivalence and a species tree aware cost function. " +
             "See http://compbio.mit.edu/treefix-dtl for details.",
             
        epilog =
             "Written by Yi-Chieh Wu (yjw@mit.edu), Massachusetts Institute of Technology. " +
             "(c) 2012. Released under the terms of the GNU General Public License.")

    grp_io = optparse.OptionGroup(parser, "Input/Output")
    common.add_common_options(grp_io, 
                              infiles=True, reroot=False,
                              stree=True, smap=True,
                              alignext=True)
    grp_io.add_option("-U", "--usertreeext", dest="usertreeext",
                      metavar="<user tree file extension>",
                      help="check if user tree is visited in search")
    grp_io.add_option("-o", "--oldext", dest="oldext",
                      metavar="<old tree file extension>",
                      default=".tree",
                      help="old tree file extension (default: \".tree\")")
    grp_io.add_option("-n", "--newext", dest="newext",
                      metavar="<new tree file extension>",
                      default=".treefix.tree",
                      help="new tree file extension (default: \".treefix.tree\")")
    parser.add_option_group(grp_io)

    default_module = "treefix.models.raxmlmodel.RAxMLModel"
    grp_model = optparse.OptionGroup(parser, "Likelihood Model")
    grp_model.add_option("-m", "--module", dest="module",
                         metavar="<module for likelihood calculations>",
                         default=default_module,
                         help="module for likelihood calculations " +\
                              "(default: \"%s\")" % default_module)
    grp_model.add_option("-e", "--extra", dest="extra",
                         metavar="<extra arguments to module>",
                         help="extra arguments to pass to program")
    parser.add_option_group(grp_model)

    grp_test = optparse.OptionGroup(parser, "Likelihood Test")
    grp_test.add_option("-t", "--test", dest="test",
                        metavar="<test statistic>",
                        choices=["AU", "NP", "BP", "KH", "SH", "WKH", "WSH"],
                        default="SH",
                        help="test statistic for likelihood equivalence (default: \"SH\")")
    grp_test.add_option("--alpha", dest="alpha",
                        metavar="<alpha>",
                        default=0.05, type="float",
                        help="alpha threshold (default: 0.05)")
    grp_test.add_option("-p", "--pval", dest="alpha",
                        metavar="<alpha>",
                        type="float",
                        help="same as --alpha")
    parser.add_option_group(grp_test)

    default_smodule = "treefix.models.rangerdtlmodel.DTLModel"
    grp_smodel = optparse.OptionGroup(parser, "Reconciliation Cost Model")
    grp_smodel.add_option("-M", "--smodule", dest="smodule",
                          metavar="<module for species tree aware cost calculations>",
                          default=default_smodule,
                          help="module for species tree aware cost calculations " +\
                               "(default: \"%s\")" % default_smodule)
    grp_smodel.add_option("-E", "--sextra", dest="sextra",
                          metavar="<extra arguments to module>",
                          help="extra arguments to pass to program")
    parser.add_option_group(grp_smodel)

    grp_search = optparse.OptionGroup(parser, "Search Options")
    grp_search.add_option("-x", "--seed", dest="seed",
                          metavar="<seed>",
                          type="int", 
                          help="seed value for random generator")
    grp_search.add_option("--niter", dest="niter",
                          metavar="<# iterations>",
                          default=1000, type="int",
                          help="number of iterations (default: 1000)")
    grp_search.add_option("--nquickiter", dest="nquickiter",
                          metavar="<# quick iterations>",
                          default=100, type="int",
                          help="number of subproposals (default: 100)")
    parser.add_option_group(grp_search)

    grp_info = optparse.OptionGroup(parser, "Information")
    common.move_option(parser, "--version", grp_info)
    common.move_option(parser, "--help", grp_info)
    grp_info.add_option("-V", "--verbose", dest="verbose",
                        metavar="<verbosity level>",
                        default="0", choices=["0","1","2","3"],
                        help="verbosity level (0=quiet, 1=low, 2=medium, 3=high)")
    grp_info.add_option("-l", "--log", dest="log",
                        metavar="<log file>",
                        default="-",
                        help="log filename.  Use '-' to display on stdout.")
    parser.add_option_group(grp_info)

    options, args = parser.parse_args()
    if not options.input and len(args) == 0:
        parser.print_help()
	sys.exit(1)

    return options, args

def main():
    """main program"""

    # parse arguments
    options, args = parse_args()

    # create command to treefix
    cmdargs = ["treefix"]
    for opt, val in options.__dict__.iteritems():
        if val is not None:
            cmdargs.extend(["--%s" % opt, str(val)])
    cmdargs.extend(["--freconroot", "0"])
    cmdargs.extend(args)
    cmd = ' '.join(map(lambda x: x if x.find(' ') == -1 else "\"%s\"" % x, cmdargs))

    # log
    print "TreeFix-DTL version: %s\n" % VERSION
    print "TreeFix-DTL executed with the following arguments:"
    print "%s %s\n" % (os.path.basename(sys.argv[0]), 
                       ' '.join(map(lambda x: x if x.find(' ') == -1 else "\"%s\"" % x, 
                                    sys.argv[1:])))
    print "TreeFix command:"
    print cmd
    print "\n\n"
    
    # delegate
    return subprocess.call(cmdargs)
    
# main function
if __name__ == "__main__":
    main()
